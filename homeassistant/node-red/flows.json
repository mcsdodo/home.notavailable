[
    {
        "id": "196ee44702dbf55a",
        "type": "tab",
        "label": "Garage opened notification",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "987e5a7eabcbbbd9",
        "type": "tab",
        "label": "Washer stopped notification",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9d5a26b2ca1fe7c9",
        "type": "tab",
        "label": "Car is home",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6dc0247c.d7210c",
        "type": "subflow",
        "name": "Actionable Notification",
        "info": "Android actionable notification v1.0.0\n\n[Documentation](https://zachowj.github.io/node-red-contrib-home-assistant-websocket/cookbook/actionable-notifications-subflow-for-android.html)\n",
        "category": "HA Actions",
        "in": [
            {
                "x": 84,
                "y": 80,
                "wires": [
                    {
                        "id": "9d85d137.fe487"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1188,
                "y": 128,
                "wires": [
                    {
                        "id": "974bd48d.c253e8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1188,
                "y": 176,
                "wires": [
                    {
                        "id": "974bd48d.c253e8",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1188,
                "y": 224,
                "wires": [
                    {
                        "id": "974bd48d.c253e8",
                        "port": 2
                    }
                ]
            },
            {
                "x": 964,
                "y": 240,
                "wires": [
                    {
                        "id": "5bc7345c.07b1cc",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "service",
                "type": "str",
                "value": "mobile_app_s22_dodo",
                "ui": {
                    "label": {
                        "en-US": "Notify Service"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "message",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Message"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action1Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action1Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 1 URI (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action2Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action2Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 2 URI (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action3Title",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 Title"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "action3Uri",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Action 3 URI (optional)"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "userInfo",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Populate User Information"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "sticky",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Sticky"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "group",
                "type": "str",
                "value": "None",
                "ui": {
                    "label": {
                        "en-US": "Group"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "None"
                                },
                                "v": ""
                            },
                            {
                                "l": {
                                    "en-US": "Cameras"
                                },
                                "v": "camera"
                            },
                            {
                                "l": {
                                    "en-US": "Security"
                                },
                                "v": "security"
                            },
                            {
                                "l": {
                                    "en-US": "Garage"
                                },
                                "v": "garage"
                            },
                            {
                                "l": {
                                    "en-US": "Laundry Room"
                                },
                                "v": "laundry_room"
                            }
                        ]
                    }
                }
            },
            {
                "name": "color",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Color"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "timeout",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Timeout"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "icon",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Icon"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "car_ui",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "channel",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#46B1EF",
        "outputLabels": [
            "Action 1",
            "Action 2",
            "Action 3",
            "Cleared"
        ],
        "icon": "font-awesome/fa-mobile-phone",
        "status": {
            "x": 244,
            "y": 272,
            "wires": [
                {
                    "id": "204dbcfc.144ae4",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "60580fe8.ace5",
        "type": "server",
        "name": "Home Assistant",
        "addon": true,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "",
        "connectionDelay": false,
        "cacheJson": false,
        "heartbeat": false,
        "heartbeatInterval": "",
        "statusSeparator": "",
        "enableGlobalContextStore": false
    },
    {
        "id": "f9e57204.71076",
        "type": "function",
        "z": "6dc0247c.d7210c",
        "name": "create service call",
        "func": "msg._originalPayload = msg.payload;\nflow.set('latestMessage', msg);\n\nconst services = env.get('service');\nif(!services) {\n    node.status({\n        text: 'no services defined',\n        shape: 'ring',\n        fill: 'red'\n    });\n    return;    \n}\n\nconst actions = [1, 2, 3].reduce((acc, i) => {\n    const name = `action${i}`\n    const id = flow.get(`${name}Id`);\n    const title = getActionProperty(i, \"title\") ?? env.get(`${name}Title`);\n    const uri = getActionProperty(i, \"uri\") ?? env.get(`${name}Uri`);\n    const action = uri.length ? 'URI' : title ? id : undefined;\n\n    acc.push({ action, title, uri });\n\n    return acc;\n}, []);\n\nconst tag = flow.get('notificationTag');\nconst data = mergeDeep({\n        title: env.get('title'),\n        message: env.get('message'),\n        data: {\n            tag,\n            color: env.get(\"color\"),\n            group: env.get(\"group\"),\n            sticky: env.get(\"sticky\"),\n            timeout: env.get(\"timeout\"),\n            icon: env.get(\"icon\"),\n            ttl: 0,\n            priority: \"high\",\n            importance: \"high\",\n            car_ui: env.get(\"car_ui\"),\n            channel: env.get(\"channel\")\n        },\n    },    \n    msg.actionable,    \n    {data: {actions}},\n);\n\nif(tag !== data?.data?.tag) {\n    flow.set('notificationTag', data?.data?.tag);\n}\n\nservices.trim().split(/,\\s*/).forEach(service => {\n    if(!service) return;\n    \n    msg.payload = {\n        service,\n        data,\n    };\n    node.send(msg);\n});\n\nnode.done();\n\nfunction getActionProperty(index, prop) {\n    const i = index - 1;\n\n    return msg?.actionable?.data?.actions?.[i]?.[prop];\n}\n\n/**\n * Simple object check.\n * @param item\n * @returns {boolean}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deep merge two objects.\n * @param target\n * @param sources\n */\nfunction mergeDeep(target, ...sources) {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "const randomId = () => Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n\n[1,2,3].forEach(i => {\n    flow.set(`action${i}Id`, `action${i}_${randomId()}`);\n})\n\n\nflow.set('notificationTag', `${env.get('title')}_${randomId()}`);",
        "finalize": "",
        "libs": [],
        "x": 298,
        "y": 80,
        "wires": [
            [
                "368c9723.5876f8"
            ]
        ]
    },
    {
        "id": "974bd48d.c253e8",
        "type": "switch",
        "z": "6dc0247c.d7210c",
        "name": "which action?",
        "property": "eventData.event.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "action1Id",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "action2Id",
                "vt": "flow"
            },
            {
                "t": "eq",
                "v": "action3Id",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1024,
        "y": 176,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "204dbcfc.144ae4",
        "type": "status",
        "z": "6dc0247c.d7210c",
        "name": "",
        "scope": [
            "f9e57204.71076",
            "5bc7345c.07b1cc",
            "a622c92a.2d9898",
            "368c9723.5876f8"
        ],
        "x": 124,
        "y": 272,
        "wires": [
            []
        ]
    },
    {
        "id": "5bc7345c.07b1cc",
        "type": "function",
        "z": "6dc0247c.d7210c",
        "name": "build message",
        "func": "const latestMessage = flow.get('latestMessage');\nconst event = msg.payload.event;\n\nlatestMessage.eventData = msg.payload;\nlatestMessage.payload = latestMessage._originalPayload;\ndelete latestMessage._originalPayload;\ndelete latestMessage.actionable;\n\nif(env.get('userInfo')) {\n    const userData = msg.userData.find(u => u.id === msg.payload.context.user_id);\n    latestMessage.userData = userData;\n}\n\nif(msg.event_type === 'mobile_app_notification_cleared') {\n    node.status({\n        text: `cleared at: ${getPrettyDate()}`,\n        shape: 'dot',\n        fill: 'blue'\n    });\n    \n    return [null, latestMessage];\n}\n\nconst index = [1,2,3].find(i => event[`action_${i}_key`] === event.action);\nnode.status({\n    text: `${event[`action_${index}_title`]} at: ${getPrettyDate()}`,\n    shape: 'dot',\n    fill: 'green'\n});\n\nreturn latestMessage;\n\n\nfunction getPrettyDate() {\n    return new Date().toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour12: false,\n        hour: 'numeric',\n        minute: 'numeric',\n    });\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 832,
        "y": 176,
        "wires": [
            [
                "974bd48d.c253e8"
            ],
            []
        ]
    },
    {
        "id": "8d3bdc0c.37493",
        "type": "switch",
        "z": "6dc0247c.d7210c",
        "name": "belongs here?",
        "property": "payload.event.tag",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "notificationTag",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 432,
        "y": 176,
        "wires": [
            [
                "83ad2004.d04d"
            ]
        ]
    },
    {
        "id": "271e4479.b9249c",
        "type": "ha-api",
        "z": "6dc0247c.d7210c",
        "name": "get user info",
        "server": "60580fe8.ace5",
        "version": 1,
        "debugenabled": false,
        "protocol": "websocket",
        "method": "get",
        "path": "",
        "data": "{\"type\": \"config/auth/list\"}",
        "dataType": "json",
        "responseType": "json",
        "outputProperties": [
            {
                "property": "userData",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 822,
        "y": 128,
        "wires": [
            [
                "5bc7345c.07b1cc"
            ]
        ]
    },
    {
        "id": "3618f055.6909a",
        "type": "server-events",
        "z": "6dc0247c.d7210c",
        "name": "mobile_app_notification_cleared",
        "server": "60580fe8.ace5",
        "version": 3,
        "exposeAsEntityConfig": "",
        "eventType": "mobile_app_notification_cleared",
        "eventData": "",
        "waitForRunning": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            },
            {
                "property": "event_type",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            }
        ],
        "x": 194,
        "y": 224,
        "wires": [
            [
                "8d3bdc0c.37493"
            ]
        ]
    },
    {
        "id": "83ad2004.d04d",
        "type": "switch",
        "z": "6dc0247c.d7210c",
        "name": "fetch user info?",
        "property": "userInfo",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 624,
        "y": 176,
        "wires": [
            [
                "271e4479.b9249c"
            ],
            [
                "5bc7345c.07b1cc"
            ]
        ]
    },
    {
        "id": "9d85d137.fe487",
        "type": "switch",
        "z": "6dc0247c.d7210c",
        "name": "",
        "property": "clear_notification",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 143,
        "y": 80,
        "wires": [
            [
                "f9e57204.71076"
            ],
            [
                "a622c92a.2d9898"
            ]
        ],
        "l": false
    },
    {
        "id": "a622c92a.2d9898",
        "type": "function",
        "z": "6dc0247c.d7210c",
        "name": "create clear notification",
        "func": "const services = env.get('service');\nif(!services) {\n    node.status({\n        text: 'no services defined',\n        shape: 'ring',\n        fill: 'red'\n    });\n    return;    \n}\n\nservices.trim().split(/,\\s*/).forEach(service => {\n    if(!service) return;\n    \n    msg.payload = {\n        service,\n        data: {\n            message: \"clear_notification\",\n            data: {\n                tag: flow.get('notificationTag'),\n            }\n        }\n    };\n    node.send(msg);\n});\n\nnode.status({text: \"cleared\"});\nnode.done();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 318,
        "y": 128,
        "wires": [
            [
                "368c9723.5876f8"
            ]
        ]
    },
    {
        "id": "9bfe567c.3d10c8",
        "type": "server-events",
        "z": "6dc0247c.d7210c",
        "name": "mobile_app_notification_action",
        "server": "60580fe8.ace5",
        "version": 3,
        "exposeAsEntityConfig": "",
        "eventType": "mobile_app_notification_action",
        "eventData": "",
        "waitForRunning": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            },
            {
                "property": "event_type",
                "propertyType": "msg",
                "value": "$outputData(\"eventData\").event_type",
                "valueType": "jsonata"
            }
        ],
        "x": 194,
        "y": 176,
        "wires": [
            [
                "8d3bdc0c.37493"
            ]
        ]
    },
    {
        "id": "368c9723.5876f8",
        "type": "api-call-service",
        "z": "6dc0247c.d7210c",
        "name": "",
        "server": "60580fe8.ace5",
        "version": 5,
        "debugenabled": false,
        "domain": "notify",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "all",
        "x": 550,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "93094498664ec804",
        "type": "subflow:6dc0247c.d7210c",
        "z": "196ee44702dbf55a",
        "name": "Handle notification",
        "env": [
            {
                "name": "service",
                "value": "mobile_app_s22_dodo_app",
                "type": "str"
            },
            {
                "name": "title",
                "value": "Garage door is opened",
                "type": "str"
            },
            {
                "name": "message",
                "value": ">= than 2 minutes",
                "type": "str"
            },
            {
                "name": "action1Title",
                "value": "Try close",
                "type": "str"
            },
            {
                "name": "action2Title",
                "value": "Snooze 30 min",
                "type": "str"
            },
            {
                "name": "action3Title",
                "value": "Open dash",
                "type": "str"
            },
            {
                "name": "action3Uri",
                "value": "/lovelace/garage",
                "type": "str"
            },
            {
                "name": "group",
                "value": "",
                "type": "str"
            },
            {
                "name": "channel",
                "value": "Garage",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 240,
        "wires": [
            [
                "0b4d1337a31ae7ad"
            ],
            [
                "4ac099eab1b2f9d7"
            ],
            [],
            [
                "8b400e3aa3d845cb"
            ]
        ]
    },
    {
        "id": "0b4d1337a31ae7ad",
        "type": "api-call-service",
        "z": "196ee44702dbf55a",
        "name": "Try close garage",
        "server": "60580fe8.ace5",
        "version": 5,
        "debugenabled": false,
        "domain": "script",
        "service": "try_close_garage",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 830,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac099eab1b2f9d7",
        "type": "delay",
        "z": "196ee44702dbf55a",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 590,
        "y": 420,
        "wires": [
            [
                "93094498664ec804"
            ]
        ]
    },
    {
        "id": "17e98cf0007ab385",
        "type": "server-state-changed",
        "z": "196ee44702dbf55a",
        "d": true,
        "name": "Test trigger is on for 5 seconds",
        "server": "60580fe8.ace5",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "input_boolean.testtrigger",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "5",
        "forType": "num",
        "forUnits": "seconds",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 170,
        "y": 380,
        "wires": [
            [
                "93094498664ec804"
            ],
            []
        ]
    },
    {
        "id": "9ad9943a303ba8f6",
        "type": "server-state-changed",
        "z": "196ee44702dbf55a",
        "name": "Garage open for 2 minutes",
        "server": "60580fe8.ace5",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "sensor.garage_is_closed_template",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "True",
        "ifStateType": "str",
        "ifStateOperator": "is_not",
        "outputOnlyOnStateChange": true,
        "for": "2",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 150,
        "y": 160,
        "wires": [
            [
                "93094498664ec804"
            ],
            []
        ]
    },
    {
        "id": "cf77a689222d1a6f",
        "type": "api-current-state",
        "z": "196ee44702dbf55a",
        "name": "Still open",
        "server": "60580fe8.ace5",
        "version": 3,
        "outputs": 2,
        "halt_if": "True",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "entity_id": "sensor.garage_is_closed_template",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 740,
        "y": 40,
        "wires": [
            [
                "93094498664ec804"
            ],
            []
        ]
    },
    {
        "id": "8b400e3aa3d845cb",
        "type": "delay",
        "z": "196ee44702dbf55a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 260,
        "wires": [
            [
                "cf77a689222d1a6f"
            ]
        ]
    },
    {
        "id": "c0326458ae2993f2",
        "type": "server-state-changed",
        "z": "987e5a7eabcbbbd9",
        "name": "Washer run completed",
        "server": "60580fe8.ace5",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "binary_sensor.front_load_washer_run_completed",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 140,
        "y": 80,
        "wires": [
            [
                "0304ac03e516c62f"
            ],
            []
        ]
    },
    {
        "id": "0304ac03e516c62f",
        "type": "subflow:6dc0247c.d7210c",
        "z": "987e5a7eabcbbbd9",
        "name": "Handle notification",
        "env": [
            {
                "name": "service",
                "value": "mobile_app_s22_dodo_app",
                "type": "str"
            },
            {
                "name": "title",
                "value": "Práčka doprala",
                "type": "str"
            },
            {
                "name": "action1Title",
                "value": "OK",
                "type": "str"
            },
            {
                "name": "group",
                "value": "",
                "type": "str"
            },
            {
                "name": "channel",
                "value": "Pracka",
                "type": "str"
            }
        ],
        "x": 510,
        "y": 240,
        "wires": [
            [],
            [],
            [],
            [
                "b5573f60bd4c7c24"
            ]
        ]
    },
    {
        "id": "b5573f60bd4c7c24",
        "type": "delay",
        "z": "987e5a7eabcbbbd9",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 60,
        "wires": [
            [
                "0304ac03e516c62f"
            ]
        ]
    },
    {
        "id": "22c74e53346628e0",
        "type": "server-state-changed",
        "z": "987e5a7eabcbbbd9",
        "d": true,
        "name": "Test trigger is on for 5 seconds",
        "server": "60580fe8.ace5",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "input_boolean.testtrigger",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "5",
        "forType": "num",
        "forUnits": "seconds",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 170,
        "y": 360,
        "wires": [
            [
                "0304ac03e516c62f"
            ],
            []
        ]
    },
    {
        "id": "3d96c26df0d8f5a7",
        "type": "server-state-changed",
        "z": "9d5a26b2ca1fe7c9",
        "name": "Car is home",
        "server": "60580fe8.ace5",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "device_tracker.bt014in_device_tracker",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "Home",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 190,
        "y": 200,
        "wires": [
            [
                "0dafd05be1a6f202"
            ],
            []
        ]
    },
    {
        "id": "0dafd05be1a6f202",
        "type": "subflow:6dc0247c.d7210c",
        "z": "9d5a26b2ca1fe7c9",
        "name": "Handle notification",
        "env": [
            {
                "name": "service",
                "value": "mobile_app_s22_dodo_app",
                "type": "str"
            },
            {
                "name": "title",
                "value": "Otvoriť garáž?",
                "type": "str"
            },
            {
                "name": "action1Title",
                "value": "OK",
                "type": "str"
            },
            {
                "name": "group",
                "value": "",
                "type": "str"
            },
            {
                "name": "car_ui",
                "value": "true",
                "type": "bool"
            },
            {
                "name": "channel",
                "value": "Garage",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "a3d1c4c0cd459406"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "a3d1c4c0cd459406",
        "type": "api-call-service",
        "z": "9d5a26b2ca1fe7c9",
        "name": "Open garage",
        "server": "60580fe8.ace5",
        "version": 5,
        "debugenabled": false,
        "domain": "rest_command",
        "service": "garage_opener",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2cdf9ac3978cca82",
        "type": "server-state-changed",
        "z": "9d5a26b2ca1fe7c9",
        "name": "Test trigger is on for 5 seconds",
        "server": "60580fe8.ace5",
        "version": 5,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entityId": "input_boolean.testtrigger",
        "entityIdType": "exact",
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "5",
        "forType": "num",
        "forUnits": "seconds",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 250,
        "y": 360,
        "wires": [
            [
                "0dafd05be1a6f202"
            ],
            []
        ]
    }
]